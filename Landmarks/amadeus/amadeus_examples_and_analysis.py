"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Amadeus City Search API

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:
1. –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ API
2. –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
3. –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
"""

import json
from typing import Dict, List, Any

# –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è –ø–æ–∏—Å–∫–∞ "PAR"
EXAMPLE_SUCCESS_RESPONSE = {
    "meta": {
        "count": 3,
        "links": {
            "self": "https://test.api.amadeus.com/v1/reference-data/locations/cities?keyword=PAR&max=5&include=AIRPORTS"
        }
    },
    "data": [
        {
            "type": "location",
            "subType": "city",
            "name": "PARIS",
            "iataCode": "PAR",
            "address": {
                "countryCode": "FR"
            },
            "geoCode": {
                "latitude": "48.85341",
                "longitude": "2.3488"
            },
            "relationships": [
                {
                    "id": "CDG",
                    "type": "Airport",
                    "href": "#/included/airports/CDG"
                },
                {
                    "id": "ORY",
                    "type": "Airport", 
                    "href": "#/included/airports/ORY"
                },
                {
                    "id": "BVA",
                    "type": "Airport",
                    "href": "#/included/airports/BVA"
                }
            ]
        },
        {
            "type": "location",
            "subType": "city",
            "name": "PARMA",
            "address": {
                "countryCode": "IT"
            },
            "geoCode": {
                "latitude": "44.80107",
                "longitude": "10.32875"
            }
        },
        {
            "type": "location",
            "subType": "city", 
            "name": "PARADISE",
            "address": {
                "countryCode": "US"
            },
            "geoCode": {
                "latitude": "36.09719",
                "longitude": "-115.14666"
            }
        }
    ],
    "included": {
        "airports": [
            {
                "type": "location",
                "subType": "airport",
                "id": "CDG",
                "name": "CHARLES DE GAULLE",
                "iataCode": "CDG",
                "address": {
                    "countryCode": "FR"
                },
                "geoCode": {
                    "latitude": "49.01278",
                    "longitude": "2.55"
                }
            },
            {
                "type": "location",
                "subType": "airport",
                "id": "ORY",
                "name": "ORLY",
                "iataCode": "ORY",
                "address": {
                    "countryCode": "FR"
                },
                "geoCode": {
                    "latitude": "48.72333",
                    "longitude": "2.37944"
                }
            },
            {
                "type": "location",
                "subType": "airport",
                "id": "BVA",
                "name": "BEAUVAIS TILLE",
                "iataCode": "BVA",
                "address": {
                    "countryCode": "FR"
                },
                "geoCode": {
                    "latitude": "49.45444",
                    "longitude": "2.11278"
                }
            }
        ]
    }
}

# –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ API
EXAMPLE_ERROR_RESPONSES = {
    "missing_keyword": {
        "errors": [
            {
                "status": 400,
                "code": 32171,
                "title": "MANDATORY DATA MISSING",
                "detail": "Missing mandatory query parameter"
            }
        ]
    },
    "invalid_country_code": {
        "errors": [
            {
                "status": 400,
                "code": 477,
                "title": "INVALID FORMAT",
                "detail": "Invalid country code format"
            }
        ]
    },
    "unauthorized": {
        "errors": [
            {
                "status": 401,
                "code": 38191,
                "title": "Invalid HTTP header",
                "detail": "Missing or invalid format for mandatory Authorization header"
            }
        ]
    },
    "rate_limit": {
        "errors": [
            {
                "status": 429,
                "code": 61,
                "title": "Rate limit exceeded",
                "detail": "You have exceeded the rate limit"
            }
        ]
    }
}

class CitySearchAnalyzer:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    
    @staticmethod
    def extract_city_info(city_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ"""
        return {
            "name": city_data.get("name"),
            "country": city_data.get("address", {}).get("countryCode"),
            "iata_code": city_data.get("iataCode"),
            "latitude": city_data.get("geoCode", {}).get("latitude"),
            "longitude": city_data.get("geoCode", {}).get("longitude"),
            "airports": [
                rel.get("id") for rel in city_data.get("relationships", [])
                if rel.get("type") == "Airport"
            ]
        }
    
    @staticmethod
    def group_by_country(cities: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
        grouped = {}
        for city in cities:
            country = city.get("address", {}).get("countryCode", "Unknown")
            if country not in grouped:
                grouped[country] = []
            grouped[country].append(city)
        return grouped
    
    @staticmethod
    def find_cities_with_airports(cities: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞–º–∏"""
        return [
            city for city in cities 
            if city.get("relationships") and 
            any(rel.get("type") == "Airport" for rel in city.get("relationships", []))
        ]
    
    @staticmethod
    def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)"""
        import math
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–¥–∏–∞–Ω—ã
        lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
        
        # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
        r = 6371
        
        return c * r

def demo_response_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤ API"""
    print("üìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –û–¢–í–ï–¢–û–í AMADEUS CITY SEARCH API")
    print("=" * 70)
    
    analyzer = CitySearchAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û–ì–û –û–¢–í–ï–¢–ê")
    print("-" * 40)
    
    cities = EXAMPLE_SUCCESS_RESPONSE["data"]
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(cities)}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –≥–æ—Ä–æ–¥–µ
    print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–∞—Ö:")
    for i, city in enumerate(cities, 1):
        info = analyzer.extract_city_info(city)
        print(f"\n{i}. {info['name']}")
        print(f"   –°—Ç—Ä–∞–Ω–∞: {info['country']}")
        if info['iata_code']:
            print(f"   IATA –∫–æ–¥: {info['iata_code']}")
        if info['latitude'] and info['longitude']:
            print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {info['latitude']}, {info['longitude']}")
        if info['airports']:
            print(f"   –ê—ç—Ä–æ–ø–æ—Ä—Ç—ã: {', '.join(info['airports'])}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    print("\nüåç –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –°–¢–†–ê–ù–ê–ú")
    print("-" * 30)
    grouped = analyzer.group_by_country(cities)
    for country, country_cities in grouped.items():
        print(f"{country}: {len(country_cities)} –≥–æ—Ä–æ–¥(–æ–≤)")
        for city in country_cities:
            print(f"  - {city['name']}")
    
    # –ì–æ—Ä–æ–¥–∞ —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞–º–∏
    print("\n‚úàÔ∏è –ì–û–†–û–î–ê –° –ê–≠–†–û–ü–û–†–¢–ê–ú–ò")
    print("-" * 25)
    cities_with_airports = analyzer.find_cities_with_airports(cities)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(cities_with_airports)} –≥–æ—Ä–æ–¥(–æ–≤) —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞–º–∏:")
    for city in cities_with_airports:
        airports = [rel["id"] for rel in city.get("relationships", []) if rel.get("type") == "Airport"]
        print(f"- {city['name']}: {', '.join(airports)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö
    if "included" in EXAMPLE_SUCCESS_RESPONSE and "airports" in EXAMPLE_SUCCESS_RESPONSE["included"]:
        print("\nüõ´ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–≠–†–û–ü–û–†–¢–ê–•")
        print("-" * 30)
        airports = EXAMPLE_SUCCESS_RESPONSE["included"]["airports"]
        for airport in airports:
            print(f"\n{airport['name']} ({airport['iataCode']})")
            print(f"  –°—Ç—Ä–∞–Ω–∞: {airport['address']['countryCode']}")
            print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {airport['geoCode']['latitude']}, {airport['geoCode']['longitude']}")
    
    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
    print(f"\n\n‚ùå –ü–†–ò–ú–ï–†–´ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("-" * 35)
    
    for error_type, error_response in EXAMPLE_ERROR_RESPONSES.items():
        print(f"\n{error_type.upper().replace('_', ' ')}:")
        error = error_response["errors"][0]
        print(f"  –ö–æ–¥: {error['code']}")
        print(f"  –°—Ç–∞—Ç—É—Å: {error['status']}")
        print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {error['title']}")
        print(f"  –î–µ—Ç–∞–ª–∏: {error['detail']}")

def usage_recommendations():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é API"""
    print("\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
    print("=" * 45)
    
    recommendations = [
        {
            "title": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
            "tips": [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä 'max' –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ 'countryCode' –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞",
                "–í–∫–ª—é—á–∞–π—Ç–µ 'AIRPORTS' —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö"
            ]
        },
        {
            "title": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
            "tips": [
                "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞",
                "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)",
                "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (429)",
                "–í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
            ]
        },
        {
            "title": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏",
            "tips": [
                "–ö–µ—à–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è",
                "–û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ç–æ–∫–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ (–∑–∞ 1-2 –º–∏–Ω—É—Ç—ã –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)",
                "–•—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–µ–π"
            ]
        },
        {
            "title": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "tips": [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–ª—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–∞–π–º–∞—É—Ç—ã –∫ –∑–∞–ø—Ä–æ—Å–∞–º",
                "–†–µ–∞–ª–∏–∑—É–π—Ç–µ retry –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫",
                "–ö–µ—à–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–≥–¥–∞ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ"
            ]
        }
    ]
    
    for rec in recommendations:
        print(f"\nüî∏ {rec['title']}:")
        for tip in rec['tips']:
            print(f"  ‚Ä¢ {tip}")

def create_usage_examples():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\n\nüìù –ü–†–ò–ú–ï–†–´ –ö–û–î–ê –î–õ–Ø –†–ê–ó–õ–ò–ß–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í")
    print("=" * 55)
    
    examples = {
        "simple_search": '''
# –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤
client = AmadeusClient(api_key, api_secret)
result = client.search_cities("LON", max_results=5)
''',
        
        "country_specific": '''
# –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
result = client.search_cities(
    keyword="BER", 
    country_code="DE", 
    max_results=3
)
''',
        
        "with_airports": '''
# –ü–æ–∏—Å–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö
result = client.search_cities(
    keyword="NYC", 
    include_airports=True,
    max_results=5
)
''',
        
        "error_handling": '''
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
result = client.search_cities("INVALID")
if not result.get("success"):
    if result.get("status_code") == 401:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    elif result.get("status_code") == 400:
        print("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞")
    else:
        print(f"–û—à–∏–±–∫–∞: {result.get('error')}")
''',
        
        "batch_processing": '''
# –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
keywords = ["PAR", "LON", "NYC", "TOK"]
results = []

for keyword in keywords:
    result = client.search_cities(keyword, max_results=3)
    if result.get("success"):
        results.append(result)
    time.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
'''
    }
    
    for name, code in examples.items():
        print(f"\nüîπ {name.replace('_', ' ').title()}:")
        print(code.strip())

if __name__ == "__main__":
    demo_response_analysis()
    usage_recommendations()
    create_usage_examples()
    
    print(f"\n{'='*70}")
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:")
    print("‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä—É —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ API")
    print("‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É")
    print("‚Ä¢ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")

