"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Amadeus City Search API

–≠—Ç–æ—Ç –∫–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å access token —á–µ—Ä–µ–∑ OAuth 2.0
2. –ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤
3. –ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
4. –ö–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∑–∞–º–µ–Ω–∏—Ç–µ DEMO_API_KEY –∏ DEMO_API_SECRET 
–Ω–∞ –≤–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏ –æ—Ç Amadeus for Developers.
"""

import requests
import json
import time
from typing import Dict, List, Optional, Any

class AmadeusClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Amadeus API"""
    
    def __init__(self, api_key: str, api_secret: str, test_mode: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –æ—Ç Amadeus
            api_secret: API —Å–µ–∫—Ä–µ—Ç –æ—Ç Amadeus  
            test_mode: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É (True) –∏–ª–∏ –ø—Ä–æ–¥–∞–∫—à–Ω (False)
        """
        self.api_key = api_key
        self.api_secret = api_secret
        self.test_mode = test_mode
        
        # URLs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
        if test_mode:
            self.base_url = "https://test.api.amadeus.com/v1"
        else:
            self.base_url = "https://api.amadeus.com/v1"
            
        self.token_url = f"{self.base_url}/security/oauth2/token"
        self.city_search_url = f"{self.base_url}/reference-data/locations/cities"
        
        # –¢–æ–∫–µ–Ω –∏ –≤—Ä–µ–º—è –µ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        self.access_token = None
        self.token_expires_at = None
    
    def get_access_token(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ OAuth 2.0
        
        Returns:
            Access token –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        print("üîê –ü–æ–ª—É—á–µ–Ω–∏–µ access token...")
        
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        data = {
            "grant_type": "client_credentials",
            "client_id": self.api_key,
            "client_secret": self.api_secret
        }
        
        try:
            response = requests.post(
                self.token_url,
                headers=headers,
                data=data,
                timeout=10
            )
            
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data.get("access_token")
                expires_in = token_data.get("expires_in", 1800)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                self.token_expires_at = time.time() + expires_in - 60  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞ –º–∏–Ω—É—Ç—É –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                
                print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
                print(f"–¢–∏–ø —Ç–æ–∫–µ–Ω–∞: {token_data.get('token_type')}")
                print(f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {expires_in} —Å–µ–∫—É–Ω–¥")
                print(f"–¢–æ–∫–µ–Ω: {self.access_token[:20]}...")
                
                return self.access_token
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:")
                print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def is_token_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        if not self.access_token or not self.token_expires_at:
            return False
        return time.time() < self.token_expires_at
    
    def ensure_valid_token(self) -> bool:
        """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        if not self.is_token_valid():
            return self.get_access_token() is not None
        return True
    
    def search_cities(self, 
                     keyword: str, 
                     country_code: Optional[str] = None,
                     max_results: int = 10,
                     include_airports: bool = False) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        
        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            country_code: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã ISO 3166 Alpha-2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            include_airports: –í–∫–ª—é—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        print(f"\nüîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{keyword}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not self.ensure_valid_token():
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω"}
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            "keyword": keyword,
            "max": max_results
        }
        
        if country_code:
            params["countryCode"] = country_code
            
        if include_airports:
            params["include"] = "AIRPORTS"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Accept": "application/vnd.amadeus+json"
        }
        
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        try:
            response = requests.get(
                self.city_search_url,
                params=params,
                headers=headers,
                timeout=10
            )
            
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return {
                    "success": True,
                    "data": data,
                    "request_params": params
                }
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:")
                error_data = response.json() if response.content else {}
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": error_data,
                    "request_params": params
                }
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return {
                "success": False,
                "error": str(e),
                "request_params": params
            }
    
    def analyze_results(self, search_result: Dict[str, Any]) -> None:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 50)
        
        if not search_result.get("success"):
            print("‚ùå –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
            if "status_code" in search_result:
                print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {search_result['status_code']}")
            if "error" in search_result:
                error = search_result["error"]
                if isinstance(error, dict) and "errors" in error:
                    for err in error["errors"]:
                        print(f"- –ö–æ–¥: {err.get('code')}")
                        print(f"- –ó–∞–≥–æ–ª–æ–≤–æ–∫: {err.get('title')}")
                        print(f"- –î–µ—Ç–∞–ª–∏: {err.get('detail')}")
                else:
                    print(f"–û—à–∏–±–∫–∞: {error}")
            return
        
        data = search_result.get("data", {})
        cities = data.get("data", [])
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(cities)}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {search_result.get('request_params', {})}")
        
        if not cities:
            print("–ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:")
        print("-" * 30)
        
        for i, city in enumerate(cities, 1):
            print(f"\n{i}. {city.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   –¢–∏–ø: {city.get('subType', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –ê–¥—Ä–µ—Å
            address = city.get('address', {})
            if address:
                country = address.get('countryCode', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   –°—Ç—Ä–∞–Ω–∞: {country}")
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            geo_code = city.get('geoCode', {})
            if geo_code:
                lat = geo_code.get('latitude', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                lon = geo_code.get('longitude', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
            
            # IATA –∫–æ–¥
            iata_code = city.get('iataCode')
            if iata_code:
                print(f"   IATA –∫–æ–¥: {iata_code}")
            
            # –°–≤—è–∑–∞–Ω–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã
            relationships = city.get('relationships', [])
            if relationships:
                airports = [rel.get('id') for rel in relationships if rel.get('type') == 'Airport']
                if airports:
                    print(f"   –ê—ç—Ä–æ–ø–æ—Ä—Ç—ã: {', '.join(airports)}")


def demo_city_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å City Search API"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø AMADEUS CITY SEARCH API")
    print("=" * 60)
    
    # –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª—é—á–∏!
    # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∫–ª—é—á–∏ –æ—Ç Amadeus for Developers
    DEMO_API_KEY = "YOUR_API_KEY_HERE"
    DEMO_API_SECRET = "YOUR_API_SECRET_HERE"
    
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª—é—á–∏!")
    print("–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞–º–µ–Ω–∏—Ç–µ DEMO_API_KEY –∏ DEMO_API_SECRET")
    print("–Ω–∞ –≤–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏ –æ—Ç Amadeus for Developers\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = AmadeusClient(DEMO_API_KEY, DEMO_API_SECRET, test_mode=True)
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_cases = [
        {
            "name": "–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 'PAR'",
            "keyword": "PAR",
            "max_results": 5,
            "include_airports": True
        },
        {
            "name": "–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ 'LON' –≤ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏",
            "keyword": "LON", 
            "country_code": "GB",
            "max_results": 3,
            "include_airports": True
        },
        {
            "name": "–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ 'NEW'",
            "keyword": "NEW",
            "max_results": 7,
            "include_airports": False
        },
        {
            "name": "–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ 'MOS' –≤ –†–æ—Å—Å–∏–∏",
            "keyword": "MOS",
            "country_code": "RU", 
            "max_results": 5,
            "include_airports": True
        }
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{'='*20} –¢–ï–°–¢ {i}: {test_case['name']} {'='*20}")
        
        result = client.search_cities(
            keyword=test_case["keyword"],
            country_code=test_case.get("country_code"),
            max_results=test_case["max_results"],
            include_airports=test_case["include_airports"]
        )
        
        client.analyze_results(result)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(test_cases):
            print("\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
            time.sleep(2)
    
    print(f"\n{'='*60}")
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API:")
    print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://developers.amadeus.com/")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏")
    print("3. –ó–∞–º–µ–Ω–∏—Ç–µ DEMO_API_KEY –∏ DEMO_API_SECRET –Ω–∞ –≤–∞—à–∏ –∫–ª—é—á–∏")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    demo_city_search()

