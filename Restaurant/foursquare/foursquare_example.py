#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Foursquare Places API

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://foursquare.com/developer/
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
3. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á
4. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_API_KEY' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: python3 foursquare_example.py
"""

import requests
import json
import os
from typing import Dict, List, Optional

class FoursquareAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Foursquare Places API"""
    
    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API
        
        Args:
            api_key: API –∫–ª—é—á –æ—Ç Foursquare
        """
        self.api_key = api_key
        self.base_url = "https://api.foursquare.com/v3"
        self.headers = {
            "Accept": "application/json",
            "Authorization": api_key
        }
    
    def search_places(self, 
                     query: str = None,
                     ll: str = None,
                     near: str = None,
                     radius: int = 1000,
                     categories: str = None,
                     limit: int = 10) -> Dict:
        """
        –ü–æ–∏—Å–∫ –º–µ—Å—Ç
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "coffee")
            ll: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "latitude,longitude"
            near: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Moscow, Russia")
            radius: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö
            categories: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        url = f"{self.base_url}/places/search"
        
        params = {}
        if query:
            params["query"] = query
        if ll:
            params["ll"] = ll
        if near:
            params["near"] = near
        if radius:
            params["radius"] = radius
        if categories:
            params["categories"] = categories
        if limit:
            params["limit"] = limit
            
        response = requests.get(url, headers=self.headers, params=params)
        response.raise_for_status()
        return response.json()
    
    def get_place_details(self, fsq_id: str, fields: str = None) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
        
        Args:
            fsq_id: ID –º–µ—Å—Ç–∞ –≤ Foursquare
            fields: –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—Ç–µ
        """
        url = f"{self.base_url}/places/{fsq_id}"
        
        params = {}
        if fields:
            params["fields"] = fields
            
        response = requests.get(url, headers=self.headers, params=params)
        response.raise_for_status()
        return response.json()
    
    def get_place_photos(self, fsq_id: str, limit: int = 5) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–µ—Å—Ç–∞
        
        Args:
            fsq_id: ID –º–µ—Å—Ç–∞ –≤ Foursquare
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        """
        url = f"{self.base_url}/places/{fsq_id}/photos"
        
        params = {"limit": limit}
        
        response = requests.get(url, headers=self.headers, params=params)
        response.raise_for_status()
        return response.json()
    
    def autocomplete(self, text: str, ll: str = None, radius: int = 1000) -> Dict:
        """
        –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            ll: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "latitude,longitude"
            radius: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
        """
        url = f"{self.base_url}/autocomplete"
        
        params = {"text": text}
        if ll:
            params["ll"] = ll
        if radius:
            params["radius"] = radius
            
        response = requests.get(url, headers=self.headers, params=params)
        response.raise_for_status()
        return response.json()

def print_places(places_data: Dict):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö"""
    
    if "results" not in places_data:
        print("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return
        
    places = places_data["results"]
    print(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {len(places)}")
    print("=" * 50)
    
    for i, place in enumerate(places, 1):
        print(f"{i}. {place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –ê–¥—Ä–µ—Å
        location = place.get('location', {})
        address = location.get('formatted_address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
        print(f"   –ê–¥—Ä–µ—Å: {address}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = place.get('categories', [])
        if categories:
            cat_names = [cat.get('name', '') for cat in categories]
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(cat_names)}")
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = place.get('distance')
        if distance is not None:
            print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –º")
        
        # ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        fsq_id = place.get('fsq_id')
        if fsq_id:
            print(f"   ID: {fsq_id}")
        
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á!
    api_key = os.getenv('FOURSQUARE_API_KEY', 'YOUR_API_KEY')
    
    if api_key == 'YOUR_API_KEY':
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_API_KEY' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á!")
        print("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://foursquare.com/developer/")
        print("–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export FOURSQUARE_API_KEY=–≤–∞—à_–∫–ª—é—á")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    client = FoursquareAPI(api_key)
    
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Foursquare Places API")
        print("=" * 50)
        
        # –ü—Ä–∏–º–µ—Ä 1: –ü–æ–∏—Å–∫ –∫–æ—Ñ–µ–µ–Ω –≤ –ú–æ—Å–∫–≤–µ
        print("1. –ü–æ–∏—Å–∫ –∫–æ—Ñ–µ–µ–Ω –≤ –ú–æ—Å–∫–≤–µ:")
        moscow_coords = "55.7558,37.6176"  # –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
        
        coffee_results = client.search_places(
            query="coffee",
            ll=moscow_coords,
            radius=2000,
            limit=5
        )
        
        print_places(coffee_results)
        
        # –ü—Ä–∏–º–µ—Ä 2: –ü–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("2. –ü–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:")
        restaurant_results = client.search_places(
            categories="13065",  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è "Restaurant"
            ll=moscow_coords,
            radius=1500,
            limit=3
        )
        
        print_places(restaurant_results)
        
        # –ü—Ä–∏–º–µ—Ä 3: –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        print("3. –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è '–ø–∏—Ü—Ü':")
        autocomplete_results = client.autocomplete(
            text="–ø–∏—Ü—Ü",
            ll=moscow_coords
        )
        
        suggestions = autocomplete_results.get("results", [])
        for suggestion in suggestions[:3]:
            text = suggestion.get("text", {})
            primary = text.get("primary", "")
            secondary = text.get("secondary", "")
            print(f"   ‚Ä¢ {primary} {secondary}")
        
        print()
        
        # –ü—Ä–∏–º–µ—Ä 4: –î–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        if coffee_results.get("results"):
            first_place = coffee_results["results"][0]
            fsq_id = first_place.get("fsq_id")
            
            if fsq_id:
                print(f"4. –î–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞ '{first_place.get('name')}':")
                
                details = client.get_place_details(
                    fsq_id,
                    fields="name,location,categories,hours,rating,price,website,tel"
                )
                
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {details.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   –†–µ–π—Ç–∏–Ω–≥: {details.get('rating', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"   –¶–µ–Ω–∞: {details.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {details.get('tel', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"   –°–∞–π—Ç: {details.get('website', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
        elif e.response.status_code == 429:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()

