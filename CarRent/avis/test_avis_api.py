#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Avis
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ access token –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Car Locations API
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
BASE_URL = "https://stage.abgapiservices.com"
TOKEN_ENDPOINT = f"{BASE_URL}/oauth/token/v1"
LOCATIONS_ENDPOINT = f"{BASE_URL}/cars/locations/v1/"

# –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
CLIENT_ID = "7bc7af29041645fe80aa5d16e71876e5"
CLIENT_SECRET = "7bc7af29041645fe80aa5d16e71876e5"

def get_access_token():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ access token –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ access token...")
    
    headers = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET
    }
    
    try:
        response = requests.get(TOKEN_ENDPOINT, headers=headers)
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            token_data = response.json()
            print("‚úÖ Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            print(f"üïí –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {token_data.get('expires_in', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Å–µ–∫—É–Ω–¥")
            return token_data.get('access_token')
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:")
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def test_car_locations_api(access_token):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Car Locations API
    """
    print("\nüöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Car Locations API...")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'country_code': 'US',
        'brand': 'Avis',
        'keyword': 'Denver'
    }
    
    headers = {
        'client_id': CLIENT_ID,
        'Authorization': f'Bearer {access_token}'
    }
    
    try:
        print(f"üìç –ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π Avis –≤ Denver, –°–®–ê...")
        response = requests.get(LOCATIONS_ENDPOINT, headers=headers, params=params)
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            locations_data = response.json()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
            return locations_data
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ª–æ–∫–∞—Ü–∏–π:")
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return None

def analyze_response(data):
    """
    –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    if not data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"üìÑ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
    
    if isinstance(data, dict):
        print(f"üîë –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞—Ü–∏–π
        if 'locations' in data:
            locations = data['locations']
            print(f"üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π: {len(locations)}")
            
            if locations:
                print("\nüè¢ –ü–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è:")
                first_location = locations[0]
                for key, value in first_location.items():
                    print(f"  {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if 'status' in data:
            status = data['status']
            print(f"\nüìã –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: {status}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª
    with open('/home/ubuntu/api_response.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    print("üíæ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ api_response.json")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Avis")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º access token
    access_token = get_access_token()
    
    if not access_token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Car Locations API
    locations_data = test_car_locations_api(access_token)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    analyze_response(locations_data)
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()

