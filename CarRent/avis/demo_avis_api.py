#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è API Avis
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤
"""

import requests
import json
from datetime import datetime

def demonstrate_api_structure():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Avis
    """
    print("üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API Avis")
    print("=" * 50)
    
    # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    print("\nüîë 1. –ü–æ–ª—É—á–µ–Ω–∏–µ Access Token")
    print("Endpoint: GET https://stage.abgapiservices.com/oauth/token/v1")
    print("–ó–∞–≥–æ–ª–æ–≤–∫–∏:")
    print("  client_id: [–≤–∞—à_client_id]")
    print("  client_secret: [–≤–∞—à_client_secret]")
    
    token_example = {
        "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwem5vRHdsYlNUcmFwM2FTQzdSUUl3anpzb2NJWGlaTUQ2cUxBakh5X0NVIn0...",
        "token_type": "Bearer",
        "expires_in": 7140
    }
    
    print("\n–ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
    print(json.dumps(token_example, indent=2, ensure_ascii=False))
    
    # 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Car Locations API
    print("\nüöó 2. Car Locations API")
    print("Endpoint: GET https://stage.abgapiservices.com/cars/locations/v1/")
    print("–ó–∞–≥–æ–ª–æ–≤–∫–∏:")
    print("  client_id: [–≤–∞—à_client_id]")
    print("  Authorization: Bearer [access_token]")
    print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
    print("  country_code: US")
    print("  brand: Avis")
    print("  keyword: Denver")
    
    # –ü—Ä–∏–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    locations_example = {
        "status": {
            "request_time": datetime.now().isoformat() + "Z",
            "request_errors": 0
        },
        "locations": [
            {
                "location_code": "DENB01",
                "name": "Denver International Airport",
                "address": {
                    "street": "24890 E 78th Ave",
                    "city": "Denver",
                    "state": "CO",
                    "postal_code": "80249",
                    "country": "US"
                },
                "coordinates": {
                    "latitude": 39.8561,
                    "longitude": -104.6737
                },
                "operating_hours": {
                    "monday": "05:00-23:59",
                    "tuesday": "05:00-23:59",
                    "wednesday": "05:00-23:59",
                    "thursday": "05:00-23:59",
                    "friday": "05:00-23:59",
                    "saturday": "05:00-23:59",
                    "sunday": "05:00-23:59"
                },
                "brand": "Avis",
                "phone": "+1-800-331-1212"
            },
            {
                "location_code": "DENC02",
                "name": "Denver Downtown",
                "address": {
                    "street": "1900 Broadway",
                    "city": "Denver",
                    "state": "CO",
                    "postal_code": "80202",
                    "country": "US"
                },
                "coordinates": {
                    "latitude": 39.7392,
                    "longitude": -104.9903
                },
                "operating_hours": {
                    "monday": "07:00-18:00",
                    "tuesday": "07:00-18:00",
                    "wednesday": "07:00-18:00",
                    "thursday": "07:00-18:00",
                    "friday": "07:00-18:00",
                    "saturday": "08:00-17:00",
                    "sunday": "10:00-16:00"
                },
                "brand": "Avis",
                "phone": "+1-800-331-1212"
            }
        ]
    }
    
    print("\n–ü—Ä–∏–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
    print(json.dumps(locations_example, indent=2, ensure_ascii=False))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –≤ —Ñ–∞–π–ª
    with open('/home/ubuntu/api_structure_example.json', 'w', encoding='utf-8') as f:
        json.dump({
            "token_response": token_example,
            "locations_response": locations_example
        }, f, indent=2, ensure_ascii=False)
    
    print("\nüíæ –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ api_structure_example.json")

def analyze_error_responses():
    """
    –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    """
    print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ API")
    print("=" * 30)
    
    # –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_error = {
        "status": {
            "request_time": "2025-06-14T14:52:22Z",
            "request_errors": 1,
            "errors": [
                {
                    "code": "401",
                    "message": "Unauthorized",
                    "reason": "unauthorized_client",
                    "details": "INVALID_CREDENTIALS: Invalid client credentials"
                }
            ]
        }
    }
    
    print("üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401):")
    print(json.dumps(auth_error, indent=2, ensure_ascii=False))
    
    # –û—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    token_missing_error = {
        "error": "invalid_request",
        "description": "The required parameter access token is missing."
    }
    
    print("\nüé´ –û—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (400):")
    print(json.dumps(token_missing_error, indent=2, ensure_ascii=False))
    
    # –û—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headers_missing_error = {
        "status": {
            "request_time": "2025-06-14T14:52:51Z",
            "request_errors": 2,
            "errors": [
                {
                    "code": "400",
                    "message": "Bad Request",
                    "reason": "validation.request.parameter.header.missing",
                    "details": "Header parameter 'client_id' is required on path '/v1' but not found in request."
                },
                {
                    "code": "400",
                    "message": "Bad Request",
                    "reason": "validation.request.parameter.header.missing",
                    "details": "Header parameter 'client_secret' is required on path '/v1' but not found in request."
                }
            ]
        }
    }
    
    print("\nüìã –û—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (400):")
    print(json.dumps(headers_missing_error, indent=2, ensure_ascii=False))

def create_test_summary():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("\nüìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API")
    print("=" * 40)
    
    summary = {
        "api_base_url": "https://stage.abgapiservices.com",
        "authentication": {
            "method": "OAuth 2.0",
            "token_endpoint": "/oauth/token/v1",
            "required_headers": ["client_id", "client_secret"],
            "token_lifetime": "7140 seconds (~2 hours)"
        },
        "tested_endpoints": {
            "/cars/locations/v1/": {
                "status": "requires_authentication",
                "method": "GET",
                "description": "–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π –ø—Ä–æ–∫–∞—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
            },
            "/cars/availability/v1/": {
                "status": "requires_authentication", 
                "method": "GET",
                "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
            },
            "/cars/reservation/v1/": {
                "status": "requires_authentication",
                "method": "POST/GET/PUT/DELETE",
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏"
            },
            "/cars/terms_and_conditions/v1/": {
                "status": "requires_authentication",
                "method": "GET", 
                "description": "–£—Å–ª–æ–≤–∏—è –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è"
            }
        },
        "error_handling": {
            "401": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "400": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏"
        },
        "response_format": "JSON",
        "test_results": {
            "api_structure": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            "authentication_required": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            "error_responses": "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã",
            "endpoints_accessible": "‚ùå –¢—Ä–µ–±—É—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        }
    }
    
    print(json.dumps(summary, indent=2, ensure_ascii=False))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
    with open('/home/ubuntu/api_test_summary.json', 'w', encoding='utf-8') as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    print("\nüíæ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ api_test_summary.json")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ API Avis")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É API
    demonstrate_api_structure()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    analyze_error_responses()
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
    create_test_summary()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()

