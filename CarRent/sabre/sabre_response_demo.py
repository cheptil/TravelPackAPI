#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Sabre Geo Search API
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import json
from datetime import datetime

def create_sample_response():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ API –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    """
    sample_response = {
        "GeoSearchRS": {
            "ApplicationResults": {
                "Success": {
                    "TimeStamp": "2024-06-14T15:17:54.123Z"
                }
            },
            "GeoSearchResults": {
                "Radius": 10,
                "UOM": "KM",
                "Category": "HOTEL",
                "Latitude": 55.7558,
                "Longitude": 37.6176,
                "MaxSearchResults": 50,
                "OffSet": 0,
                "GeoSearchResult": [
                    {
                        "Distance": 1.2,
                        "Direction": "NE",
                        "HotelCode": "100066952",
                        "HotelName": "–ú–æ—Å–∫–≤–∞ –û—Ç–µ–ª—å",
                        "Address": {
                            "Street": "–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞ 15",
                            "City": "–ú–æ—Å–∫–≤–∞",
                            "StateProv": "MOW",
                            "CountryCode": "RU",
                            "PostalCode": "125009"
                        },
                        "GeoCode": {
                            "Latitude": 55.7647,
                            "Longitude": 37.6122
                        },
                        "ChainCode": "RT",
                        "ChainName": "Radisson Hotels",
                        "StarRating": 4
                    },
                    {
                        "Distance": 2.8,
                        "Direction": "SW",
                        "HotelCode": "100066953",
                        "HotelName": "–ì—Ä–∞–Ω–¥ –û—Ç–µ–ª—å –ï–≤—Ä–æ–ø–∞",
                        "Address": {
                            "Street": "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å 1",
                            "City": "–ú–æ—Å–∫–≤–∞",
                            "StateProv": "MOW",
                            "CountryCode": "RU",
                            "PostalCode": "109012"
                        },
                        "GeoCode": {
                            "Latitude": 55.7539,
                            "Longitude": 37.6208
                        },
                        "ChainCode": "LX",
                        "ChainName": "Luxury Collection",
                        "StarRating": 5
                    },
                    {
                        "Distance": 4.5,
                        "Direction": "N",
                        "HotelCode": "100066954",
                        "HotelName": "–ë–∏–∑–Ω–µ—Å –û—Ç–µ–ª—å –¶–µ–Ω—Ç—Ä",
                        "Address": {
                            "Street": "–ù–æ–≤—ã–π –ê—Ä–±–∞—Ç 26",
                            "City": "–ú–æ—Å–∫–≤–∞",
                            "StateProv": "MOW",
                            "CountryCode": "RU",
                            "PostalCode": "121099"
                        },
                        "GeoCode": {
                            "Latitude": 55.7522,
                            "Longitude": 37.5991
                        },
                        "ChainCode": "HI",
                        "ChainName": "Holiday Inn",
                        "StarRating": 3
                    }
                ]
            }
        }
    }
    
    return sample_response

def analyze_geo_search_response(response_data):
    """
    –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ Geo Search API
    """
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê SABRE GEO SEARCH API")
    print("=" * 60)
    
    if not response_data or "GeoSearchRS" not in response_data:
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
        return
    
    geo_search_rs = response_data["GeoSearchRS"]
    
    # 1. –ê–Ω–∞–ª–∏–∑ ApplicationResults
    print("\n1. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:")
    print("-" * 30)
    
    if "ApplicationResults" in geo_search_rs:
        app_results = geo_search_rs["ApplicationResults"]
        
        if "Success" in app_results:
            success = app_results["Success"]
            print(f"‚úì –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")
            
            if "TimeStamp" in success:
                timestamp = success["TimeStamp"]
                print(f"‚úì –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {timestamp}")
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
                try:
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    print(f"‚úì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {dt.strftime('%d.%m.%Y %H:%M:%S UTC')}")
                except:
                    print(f"‚úì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {timestamp}")
        
        if "Error" in app_results:
            error = app_results["Error"]
            print(f"‚úó –û—à–∏–±–∫–∞: {error}")
    
    # 2. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
    print("\n2. –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–ò–°–ö–ê:")
    print("-" * 30)
    
    if "GeoSearchResults" in geo_search_rs:
        search_results = geo_search_rs["GeoSearchResults"]
        
        print(f"üìç –¶–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞:")
        print(f"   –®–∏—Ä–æ—Ç–∞: {search_results.get('Latitude', 'N/A')}")
        print(f"   –î–æ–ª–≥–æ—Ç–∞: {search_results.get('Longitude', 'N/A')}")
        
        print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   –†–∞–¥–∏—É—Å: {search_results.get('Radius', 'N/A')} {search_results.get('UOM', 'N/A')}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {search_results.get('Category', 'N/A')}")
        print(f"   –ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {search_results.get('MaxSearchResults', 'N/A')}")
        print(f"   –°–º–µ—â–µ–Ω–∏–µ: {search_results.get('OffSet', 'N/A')}")
        
        # 3. –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if "GeoSearchResult" in search_results:
            results = search_results["GeoSearchResult"]
            
            print(f"\n3. –ù–ê–ô–î–ï–ù–ù–´–ï –õ–û–ö–ê–¶–ò–ò:")
            print("-" * 30)
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(results)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º
            distances = [r.get('Distance', 0) for r in results if 'Distance' in r]
            if distances:
                print(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏—è:")
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min(distances)} {search_results.get('UOM', 'KM')}")
                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(distances)} {search_results.get('UOM', 'KM')}")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ: {sum(distances)/len(distances):.1f} {search_results.get('UOM', 'KM')}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
            directions = [r.get('Direction', '') for r in results if 'Direction' in r]
            if directions:
                direction_count = {}
                for direction in directions:
                    direction_count[direction] = direction_count.get(direction, 0) + 1
                
                print(f"üß≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:")
                for direction, count in sorted(direction_count.items()):
                    print(f"   {direction}: {count}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
            print(f"\n4. –î–ï–¢–ê–õ–ò –õ–û–ö–ê–¶–ò–ô:")
            print("-" * 30)
            
            for i, result in enumerate(results, 1):
                print(f"\nüè® –õ–æ–∫–∞—Ü–∏—è {i}:")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if 'HotelName' in result:
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result['HotelName']}")
                if 'HotelCode' in result:
                    print(f"   –ö–æ–¥ –æ—Ç–µ–ª—è: {result['HotelCode']}")
                
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                distance = result.get('Distance', 'N/A')
                direction = result.get('Direction', 'N/A')
                uom = search_results.get('UOM', 'KM')
                print(f"   –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {distance} {uom} –Ω–∞ {direction}")
                
                # –ê–¥—Ä–µ—Å
                if 'Address' in result:
                    address = result['Address']
                    print(f"   –ê–¥—Ä–µ—Å:")
                    if 'Street' in address:
                        print(f"     –£–ª–∏—Ü–∞: {address['Street']}")
                    if 'City' in address:
                        print(f"     –ì–æ—Ä–æ–¥: {address['City']}")
                    if 'StateProv' in address:
                        print(f"     –†–µ–≥–∏–æ–Ω: {address['StateProv']}")
                    if 'CountryCode' in address:
                        print(f"     –°—Ç—Ä–∞–Ω–∞: {address['CountryCode']}")
                    if 'PostalCode' in address:
                        print(f"     –ò–Ω–¥–µ–∫—Å: {address['PostalCode']}")
                
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                if 'GeoCode' in result:
                    geocode = result['GeoCode']
                    lat = geocode.get('Latitude', 'N/A')
                    lon = geocode.get('Longitude', 'N/A')
                    print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
                if 'ChainName' in result:
                    print(f"   –°–µ—Ç—å: {result['ChainName']}")
                if 'ChainCode' in result:
                    print(f"   –ö–æ–¥ —Å–µ—Ç–∏: {result['ChainCode']}")
                
                # –†–µ–π—Ç–∏–Ω–≥
                if 'StarRating' in result:
                    stars = "‚≠ê" * result['StarRating']
                    print(f"   –†–µ–π—Ç–∏–Ω–≥: {stars} ({result['StarRating']} –∑–≤–µ–∑–¥)")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                additional_fields = {k: v for k, v in result.items() 
                                   if k not in ['HotelName', 'HotelCode', 'Distance', 'Direction', 
                                              'Address', 'GeoCode', 'ChainName', 'ChainCode', 'StarRating']}
                
                if additional_fields:
                    print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:")
                    for key, value in additional_fields.items():
                        print(f"     {key}: {value}")
    
    print(f"\n{'=' * 60}")

def demonstrate_different_search_types():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
    """
    print("\n–ü–†–ò–ú–ï–†–´ –†–ê–ó–õ–ò–ß–ù–´–• –¢–ò–ü–û–í –ü–û–ò–°–ö–ê:")
    print("=" * 50)
    
    search_examples = [
        {
            "name": "–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–ú–æ—Å–∫–≤–∞)",
            "request": {
                "GeoRef": {
                    "Radius": 10,
                    "UOM": "KM",
                    "Category": "HOTEL",
                    "GeoCode": {
                        "Latitude": 55.7558,
                        "Longitude": 37.6176
                    }
                }
            }
        },
        {
            "name": "–ü–æ–∏—Å–∫ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –ø–æ –∫–æ–¥—É –≥–æ—Ä–æ–¥–∞",
            "request": {
                "GeoRef": {
                    "Radius": 50,
                    "UOM": "KM",
                    "Category": "AIR",
                    "AirportCode": "MOW"
                }
            }
        },
        {
            "name": "–ü–æ–∏—Å–∫ –º–µ—Å—Ç –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞–¥—Ä–µ—Å—É",
            "request": {
                "GeoRef": {
                    "Radius": 15,
                    "UOM": "MI",
                    "Category": "CAR",
                    "Address": "Red Square, Moscow, Russia"
                }
            }
        },
        {
            "name": "–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π —Å–µ—Ç–∏ Radisson –≤ —Ä–∞–¥–∏—É—Å–µ 20 –∫–º",
            "request": {
                "GeoRef": {
                    "Radius": 20,
                    "UOM": "KM",
                    "Category": "HOTEL",
                    "GeoCode": {
                        "Latitude": 55.7558,
                        "Longitude": 37.6176
                    },
                    "GeoAttributes": {
                        "Attributes": [
                            {
                                "Name": "CHAIN",
                                "Value": "RT"
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (POI)",
            "request": {
                "GeoRef": {
                    "Radius": 5,
                    "UOM": "KM",
                    "Category": "HOTEL",
                    "POI": "Red Square"
                }
            }
        }
    ]
    
    for i, example in enumerate(search_examples, 1):
        print(f"\n{i}. {example['name']}:")
        print(json.dumps(example['request'], indent=2, ensure_ascii=False))

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SABRE GEO SEARCH API")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    sample_response = create_sample_response()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    print("\n–ü–†–ò–ú–ï–† JSON –û–¢–í–ï–¢–ê:")
    print("-" * 30)
    print(json.dumps(sample_response, indent=2, ensure_ascii=False))
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    analyze_geo_search_response(sample_response)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
    demonstrate_different_search_types()
    
    print(f"\n{'=' * 50}")
    print("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("- API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö")
    print("- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∫–æ–¥—ã, –∞–¥—Ä–µ—Å–∞)")
    print("- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏")
    print("- –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
    print("- –í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞")

if __name__ == "__main__":
    main()

